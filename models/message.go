// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Message message
//
// swagger:model Message
type Message struct {

	// content
	Content string `json:"content,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// message ID
	MessageID string `json:"messageID,omitempty"`

	// recipient
	Recipient string `json:"recipient,omitempty"`

	// sent time
	// Format: date-time
	SentTime strfmt.DateTime `json:"sentTime,omitempty"`

	// status
	// Enum: [SCHEDULED SENT FAILED]
	Status string `json:"status,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this message
func (m *Message) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSentTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Message) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Message) validateSentTime(formats strfmt.Registry) error {
	if swag.IsZero(m.SentTime) { // not required
		return nil
	}

	if err := validate.FormatOf("sentTime", "body", "date-time", m.SentTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var messageTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SCHEDULED","SENT","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		messageTypeStatusPropEnum = append(messageTypeStatusPropEnum, v)
	}
}

const (

	// MessageStatusSCHEDULED captures enum value "SCHEDULED"
	MessageStatusSCHEDULED string = "SCHEDULED"

	// MessageStatusSENT captures enum value "SENT"
	MessageStatusSENT string = "SENT"

	// MessageStatusFAILED captures enum value "FAILED"
	MessageStatusFAILED string = "FAILED"
)

// prop value enum
func (m *Message) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, messageTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Message) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Message) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this message based on context it is used
func (m *Message) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Message) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Message) UnmarshalBinary(b []byte) error {
	var res Message
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
